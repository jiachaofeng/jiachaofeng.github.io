[ { "title": "微服务学习笔记1 - 搭建第一个Spring Boot WEB 应用", "url": "/posts/%E5%BE%AE%E6%9C%8D%E5%8A%A11/", "categories": "微服务", "tags": "Spring Boot，Spring Cloud，Java", "date": "2021-06-28 00:00:00 +0800", "snippet": "​ Spring Boot 是Spring 提供的一种框架，使开发者可以更加轻松创建一个基于Spring的应用程序。与SpringMVC的不同，SpringBoot更专注于开发微服务的后台接口，并且Spring Boot遵循，这使得开发者在敲业务代码的时候尽可能避免配置同维护大量的xml文件。​ Spring Cloud 同Spring Boot 不同，虽然大部分功能插件都是通过Spring Boot来实现（Spring Cloud就是一个个Spring Boot项目），但是Spring Cloud更关注于解决微服务使用时候遇到的问题（服务注册和发现，服务的集中配置，服务网关，服务熔..." }, { "title": "物化视图 MATERIALIZED VIEW", "url": "/posts/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/", "categories": "DB", "tags": "Oracle，PLSQL", "date": "2021-05-20 00:00:00 +0800", "snippet": "物化视图物化视图是包括一个查询结果的数据库对象，它是远程数据的的本地副本，或者用来生成基于数据表求和的汇总表。物化视图存储基于远程表的数据，也可以称为快照。对于复制，物化视图允许你在本地维护远程数据的副本,这些副本是只读的。如果你想修改本地副本，必须用高级复制的功能。当你想从一个表或视图中抽取数据时，你可以用从物化视图中抽取。对于数据仓库，创建的物化视图通常情况下是聚合视图，单一表聚合视图和连接视图。实现两个数据库之间的数据同步，可以存在时间差。 刷新的方式 Fast Complete Force 刷新的方法 DBMS_REFRES..." }, { "title": "转载-多线程框架", "url": "/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A1%86%E6%9E%B6/", "categories": "Java", "tags": "Interview，转载", "date": "2021-05-20 00:00:00 +0800", "snippet": "一.Java中的ThreadPoolExecutor类java.uitl.concurrent.ThreadPoolExecutor类在ThreadPoolExecutor类中提供了四个构造方法：public class ThreadPoolExecutor extends AbstractExecutorService { ..... public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit, BlockingQueue..." }, { "title": "volidate关键字", "url": "/posts/volidate%E5%85%B3%E9%94%AE%E5%AD%97/", "categories": "Java", "tags": "Interview", "date": "2021-05-20 00:00:00 +0800", "snippet": "1.volatile关键字的两层语义一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：　　1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。　　2）禁止进行指令重排序。　　先看一段代码，假如线程1先执行，线程2后执行：//线程1boolean stop = false;while(!stop){ doSomething();} //线程2stop = true;　这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？..." }, { "title": "转载-ConcurrentHashMap", "url": "/posts/ConcurrentHashMap/", "categories": "Java", "tags": "Interview，转载", "date": "2021-05-19 00:00:00 +0800", "snippet": "ConcurrentHashMap一、简单回顾ConcurrentHashMap在jdk1.7中的设计先简单看下ConcurrentHashMap类在jdk1.7中的设计，其基本结构如图所示：每一个segment都是一个HashEntry&amp;lt;K,V&amp;gt;[] table， table中的每一个元素本质上都是一个HashEntry的单向队列。比如table[3]为首节点，table[3]-&amp;gt;next为节点1，之后为节点2，依次类推。public class ConcurrentHashMap&amp;lt;K, V&amp;gt; extends Abs..." }, { "title": "转载-jdk1.6，jdk1.7，jdk1.8的区别", "url": "/posts/JDK-diff/", "categories": "Java", "tags": "Interview, 转载", "date": "2021-05-01 00:00:00 +0800", "snippet": "jdk1.6，jdk1.7，jdk1.8的区别jdk1.7新增特性 switch 支持string jdk1.6: int,short,char,byte,Enumjdk1.7: string,int,short,char,byte,Enum 泛型自动判断 ArrayList al1 = new ArrayList(); // OldArrayList al2 = new ArrayList&amp;lt;&amp;gt;(); // New 新的整数字面表达方式 - “0b”前缀和”_“连数符 byte b1 = 0b001000..." }, { "title": "第一篇Jekyll博客", "url": "/posts/%E7%AC%AC%E4%B8%80%E7%AF%87jekyll%E5%8D%9A%E5%AE%A2/", "categories": "blog", "tags": "jekyll, blog", "date": "2020-05-28 00:00:00 +0800", "snippet": "​ 作为经常浏览Github的猴子，相信各位都逐渐有做技术笔录或者技术博客的习惯。下面介绍是比较简单的使用Jekyll主题在Github pages完成自己的技术博客（主要防止我不写又忘记了）。工具集1. 静态站点生成器​ 程序员写文章的时候是习惯使用markdown语法的。而GitHub pages提供简易的博客功能给程序员，但是上传的内容仅限静态网站。所以我们就需要静态站点生成器负责将我们写的md格式文章转化为固定格式的静态文件。​ Jekyll 就是这样一种生成器，它是基于ruby实现的，所以安装需要Ruby同RubyGem (Ruby的包管理工具）。对于初学者来说，我是比较..." } ]
